2장

Vue.js2 - 기대한 방식으로 동작한다.

메시지 앱 ( Message App ) 이라는 간단한 애플리케이션을 만들어 option 객체가 어떻게 활용되는지 살펴본다.
이 SPA 는 다음과 같은 기능을 가진다.
메시지 추가하기.
메시지 리스트보기.
메시지 삭제하기.
특정 조건에서 추가 기능을 자동으로 비활성화하기

- 컴포넌트
Vue.js 는 프로퍼티 이름을 파스칼 표기법(Pascal Case) 에서 케밥 표기법(kebab-case)으로 변환하고,
컴포넌트를 등록할 때 그 이름을 컴포넌트 ID 로 활용한다.

- 컴포넌트의 이름을 결정할 때에는, 해당 코드에서
변수명과 파일명 같은 것이 작업 중인 도메인의 성격을 잘 반영하는지 고민해야 하며,
그 다음 명명 규약 또는 스타일 가이드를 따르느지 고민해야 한다.
그런 다음 더 짧은 이름을 선택한다.
Vue.js 에는 공식 스타일 가이드가 있는데, 밀접하게 연결되어 있는 컴포넌트들의 이름에 대한 한가지 지침이 있다.
=> '부모 컴포넌트와 밀접하게 연결된 자식 컴포넌트는 부모 컴포넌트의 이름을 접두사로 포함해야 한다.'
ex) MessageList     부모 컴포넌트
	MessageListItem 자식 컴포넌트


- 지시자 ( Directives )
Vue 애플리케이션에서 중요한 역할을 한다.
지시자는 표현식의 값이 변경될 때 이에 반응해 DOM 에 변경사항을 적용한다.
예를 들어 v-for 지시자는 원본 데이터를 기반으로 요소 또는 데이터 블록을 여러 번 렌더링하고,
v-on 지시자는 리스너를 DOM 요소에 부착한다.

기본 내장 지시자를 활용하지 않고 사용자 정의 지시자를 만들 수도 있다.
원래 v-on 이 있는데 v-focus 같은거 만들 수 있다.
그러려면 지시자 정의 객체를 생성하고 이를 Vue.directive() 를 이용해 전역으로 등록하거나
컴포넌트의 directives 프로퍼티를 이용해 해당 컴포넌트에 로컬로 등록하면 된다.

Vue.js 가 지시자 외부에서 일어나는 일들을 다음과 같은 훅 함수를 지시자 정의 객체 내에 추가할 수 있고,
이 훅 함수를 이용해 그에 따른 다양한 로직을 적용할 수 있다.
1) bind : 지시자가 처음 요소에 바인딩 됐을 때 한 번만 호출된다. 여기서 일회성 설정을 수행할 수 있다.
2) inserted : 바인딩 된 요소가 부모 노드에 삽입됐을 때 호출된다. 그러나 이 시점에 부모 노드는 DOM 에 삽입되지 않았을 수도 있음.
3) update : 포함하는 컴포넌트의 VNode 가 업데이트 됐을 때 호출됨. 하지만 자식 컴포넌트의 VNode 가 업데이트 되지 않았을 수도 있음.
4) componentUpdated : 컴포넌트의 VNode 와 자식 컴포넌트의 VNode 가 업데이트된 후에 호출된다.
5) unbind : 요소에서 지시자의 바인딩이 해제될 때 한 번만 호출된다.


directive / focus.directive.js 참고



